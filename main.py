# main.py
import logging
import re
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from database import init_db, add_reminder, get_reminders, delete_reminder, mark_reminder_done, add_note, get_notes, toggle_note_completion, delete_note, add_habit, get_habits, mark_habit_done, get_habit_streak

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏–∑ BotFather ‚Äî –í–°–¢–ê–í–¨ –°–Æ–î–ê!
BOT_TOKEN = "8480651836:AAHGDJ..."  # ‚Üê –ó–ê–ú–ï–ù–ò –≠–¢–û –ù–ê –°–í–û–ô –¢–û–ö–ï–ù!

# =====================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
# =====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:\n"
        "üîπ –ù–∞–ø–æ–º–Ω—é –æ –¥–µ–ª–∞—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "üîπ –°–æ—Ö—Ä–∞–Ω—é –∑–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–¥–∞—á–∏\n"
        "üîπ –û—Ç—Å–ª–µ–∂—É —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂—É!\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")],
            [InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="show_notes")],
            [InlineKeyboardButton("üå± –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="show_habits")],
            [InlineKeyboardButton("üìã –ú–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª", callback_data="show_tasks")],
            [InlineKeyboardButton("üí° –ü–æ–º–æ—â—å", callback_data="help")]
        ])
    )

async def add_reminder_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üìÖ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `25.12.2024 18:30`\n\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)."
    )
    context.user_data['state'] = 'waiting_for_reminder_datetime'

async def add_note_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:")
    context.user_data['state'] = 'waiting_for_note_title'

async def add_habit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üåø –ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–∏—Ç—å –≤–æ–¥—É¬ª, ¬´–ß–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü¬ª\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    context.user_data['state'] = 'waiting_for_habit_name'

async def help_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üí° –ü–æ–º–æ—â—å:\n\n"
        "‚Ä¢ /remind ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ /notes ‚Äî –∑–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ /habits ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ‚Äî –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ—á–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.\n"
        "–ü—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —è –±—É–¥—É —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∑–∞ —Ç–µ–±—è! ‚ù§Ô∏è",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]])
    )

# =====================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# =====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    user_id = update.effective_user.id

    if state == 'waiting_for_reminder_datetime':
        text = update.message.text.strip()
        lines = text.splitlines()
        if len(lines) < 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å:\n\n<–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è>\n<—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>")
            return

        dt_str = lines[0].strip()
        reminder_text = "\n".join(lines[1:]).strip()

        pattern = r'^\d{2}\.\d{2}\.\d{4}\s\d{2}:\d{2}$'
        if not re.match(pattern, dt_str):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`")
            return

        try:
            reminder_time = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
            if reminder_time < datetime.now():
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ!")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è.")
            return

        reminder_id = add_reminder(user_id, reminder_text, dt_str)
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"‚è∞ {dt_str}\n"
            f"üìù {reminder_text}\n\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ!"
        )
        context.user_data['state'] = None

    elif state == 'waiting_for_note_title':
        context.user_data['note_title'] = update.message.text
        await update.message.reply_text("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
        context.user_data['state'] = 'waiting_for_note_content'

    elif state == 'waiting_for_note_content':
        title = context.user_data.get('note_title', '')
        content = update.message.text
        note_id = add_note(user_id, title, content)
        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n*{title}*\n{content}", parse_mode="Markdown")
        context.user_data['state'] = None
        context.user_data.pop('note_title', None)

    elif state == 'waiting_for_habit_name':
        habit_name = update.message.text.strip()
        if not habit_name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        add_habit(user_id, habit_name)
        await update.message.reply_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É:\n\n*{habit_name}*\n\n"
            f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã –µ—ë –≤—ã–ø–æ–ª–Ω–∏–ª ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è¬ª üëá\n"
            f"–Ø –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è", callback_data=f"mark_habit_{habit_name}")]
            ])
        )
        context.user_data['state'] = None

# =====================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö (–Ω–∞–∂–∞—Ç–∏—è)
# =====================

async def handle_note_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("note_"):
        note_id = int(data.split("_")[1])
        notes = get_notes(query.from_user.id)
        note = next((n for n in notes if n[0] == note_id), None)
        if note:
            note_id_db, title, content, is_completed, created_at = note
            status = "‚úÖ" if is_completed else "‚¨ú"
            text = f"{status} *{title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}*\n\n{content}\n\n_–°–æ–∑–¥–∞–Ω–æ: {created_at}_"
            keyboard = [
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_{note_id}")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note_{note_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_notes")]
            ]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

    elif data.startswith("toggle_"):
        note_id = int(data.split("_")[1])
        toggle_note_completion(note_id)
        await handle_note_click(update, context)

    elif data.startswith("delete_note_"):
        note_id = int(data.split("_")[2])
        delete_note(note_id)
        await show_notes(update, context)

    elif data == "show_notes":
        await show_notes(update, context)

    elif data == "show_habits":
        await show_habits(update, context)

    elif data == "show_tasks":
        await show_tasks(update, context)

    elif data == "add_reminder":
        await add_reminder_button(update, context)

    elif data == "add_note":
        await add_note_button(update, context)

    elif data == "add_habit":
        await add_habit_button(update, context)

    elif data == "help":
        await help_button(update, context)

    elif data == "start":
        await start(update, context)

    elif data.startswith("mark_habit_"):
        habit_name = data.replace("mark_habit_", "")
        user_id = update.effective_user.id
        streak = mark_habit_done(user_id, habit_name)
        await query.answer(f"üî• –û—Ç–º–µ—á–µ–Ω–æ! –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ —É–∂–µ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!", show_alert=True)
        await show_habits(update, context)

# =====================
# –ö–û–ú–ê–ù–î–´
# =====================

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÖ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `25.12.2024 18:30`\n\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)."
    )
    context.user_data['state'] = 'waiting_for_reminder_datetime'

async def notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_notes(update, context)

async def habits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_habits(update, context)

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_tasks(update, context)

# =====================
# –ü–û–ö–ê–ó–ê–¢–¨ –≠–õ–ï–ú–ï–ù–¢–´
# =====================

async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    notes = get_notes(user_id)
    if not notes:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")]
        ]))
        return

    keyboard = []
    for note in notes:
        note_id, title, content, is_completed, _ = note
        btn_text = f"{'‚úÖ ' if is_completed else '‚¨ú '} {title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"note_{note_id}")])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")])
    await update.message.reply_text("üìù *–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

async def show_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    habits = get_habits(user_id)
    if not habits:
        await update.message.reply_text(
            "üå± –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
            "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit")]
            ])
        )
        return

    text = "üåø *–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:*\n\n"
    for habit in habits:
        habit_name, total_days, current_streak = habit
        emoji = "üî•" if current_streak >= 7 else "üíß" if current_streak >= 3 else "üå±"
        text += f"{emoji} *{habit_name}* ‚Äî {total_days} –¥–Ω–µ–π ({current_streak} –ø–æ–¥—Ä—è–¥)\n"

    text += "\nüìå –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–º–µ—á–∞–π, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª ‚Äî —è –±—É–¥—É —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∑–∞ —Ç–µ–±—è!"

    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit")]
    ]), parse_mode="Markdown")

async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª ‚Äî —ç—Ç–æ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /notes, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.\n\n"
        "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–∏—Ö –≤ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="show_notes")]
        ])
    )

# =====================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç)
# =====================

async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    reminders = get_reminders(None)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    for rem in reminders:
        rem_id, text, reminder_time, is_done, created_at = rem
        if is_done:
            continue
        if reminder_time <= now:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            user_id = rem[1]
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚è∞ *–í–†–ï–ú–Ø!* \n\n{text}\n\n–ù–µ –∑–∞–±—É–¥—å ‚Äî —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ! üí™",
                    parse_mode="Markdown"
                )
                mark_reminder_done(rem_id)
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# =====================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =====================

def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    app = Application.builder().token("8480651836:AAHGDJ84Yn3jMzbQJZ6cqx6leIVO-uqSZV4").build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("notes", notes_command))
    app.add_handler(CommandHandler("habits", habits_command))
    app.add_handler(CommandHandler("tasks", tasks_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(add_reminder_button, pattern="^add_reminder$"))
    app.add_handler(CallbackQueryHandler(add_note_button, pattern="^add_note$"))
    app.add_handler(CallbackQueryHandler(add_habit_button, pattern="^add_habit$"))
    app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(start, pattern="^start$"))

    app.add_handler(CallbackQueryHandler(handle_note_click, pattern=r"^(note_|toggle_|delete_note_|show_notes|show_habits|show_tasks|mark_habit_.+)$"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    job_queue = app.job_queue
    job_queue.run_repeating(check_reminders, interval=10, first=5)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)")
    app.run_polling()

if __name__ == '__main__':
    main()